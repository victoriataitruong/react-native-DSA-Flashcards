export const flashcards = [
    { question: "Q1: When should you use an array and when should you use an arraylist and when should you use a list?", answer: "Use an Array for fixed-size collections and performance-critical code:   \nJava: int[] numbers = {1, 2, 3, 4, 5}; \n\nUse an ArrayList for dynamically growing collections:   \nJava: ArrayList<String> fruits = new ArrayList<>();\n\nUse a List when you want flexibility and abstraction: \nList<String> myList;" },
    { question: "Q2: What is an AVL Tree?", answer: "An AVL tree is a type of binary search tree (BST) that keeps everything balanced. \n\nIf a tree gets too 'lopsided,' it gets re-arranged so that no branch is much longer than another. This makes searching faster." },
    { question: "Q3: What is the difference between a binary tree and a binary search tree?", answer: "Structure: A binary tree is a tree where each node can have at most two children (left and right).No Specific Order. The nodes in a binary tree do not follow any particular order. There are no rules about how the values should be organized.\n\nUsage: It's used in various applications like expression trees, decision trees, and more, where ordering is not important. \n\nStructure: A binary search tree is a special type of binary tree where each node has at most two children. Specific Order. The nodes follow a strict ordering rule: The value of the left child must be less than the parent node's value.The value of the right child must be greater than the parent node's value.\n\nUsage: BSTs are used for efficient searching, insertion, and deletion operations since the ordering ensures that we can quickly find elements by comparing them in a sorted manner.", },
    { question: "Q4: List Big O most efficient to least efficient", answer: " O(1) - Constant Time\n O(log n) - Logarithmic Time\n O(n) - Linear Time\n O(n log n) - Linearithmic Time\n O(n²) - Quadratic Time\n O(n³) - Cubic Time\n O(2^n) - Exponential Time\n O(n!) - Factorial Time", },
    { question: "Q5: Name some design patterns", answer: "Acroynm: FODSS\n\nFactory Pattern (Ordering a burger or something premade)\n\nObserver Pattern (Social Media Notification, alerts all at the same thing)\n\nDecorator Pattern (You start with a plain cake. Then you add chocolate, then sprinkles, then candles. The cake keeps getting better, but the base cake stays the same!)\n\nSingleton Pattern (There's only one. There's only one database instance in your code)\n\nStrategy Pattern (A billing system that allows you to pay in many ways)", },
  ];